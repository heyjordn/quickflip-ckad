---
- id: '1'
  category: Kubernetes (CKAD) - Core Concepts
  question: "### Create a namespace called 'mynamespace' and a pod with image nginx
    called nginx on this namespace"
  answer: |
    ```bash
    kubectl create namespace mynamespace
    kubectl run nginx --image=nginx --restart=Never -n mynamespace
    ```
- id: '2'
  category: Kubernetes(CKAD) - Core Concepts
  question: "### Create the pod that was just described using YAML"
  answer: |
    ```bash
    kubectl run nginx --image=nginx --restart=Never --dry-run=client -n mynamespace -o yaml > pod.yaml
    ```
    
    Alternatively, you can run in one line

    ```bash 
      kubectl run nginx --image=nginx --restart=Never --dry-run=client -o yaml | kubectl create -n mynamespace -f -
    ```
- id: '3'
  category: Kubernetes (CKAD) - Core Concepts
  question: '### Create a busybox pod (using YAML) that runs the command "env". Run
    it and see the output'
  answer: |
    ```yaml
    ### Create a  YAML template with this command 
    
    kubectl run busybox --image=busybox --restart=Never --dry-run=client -o yaml --command -- env > envpod.yaml
    ```
- id: '4'
  category: Kubernetes (CKAD) - Core Concepts
  question: |
    "Given a simple pod called nginx, in the default namespace, execute a simple shell on that pod"
  answer: |
    ```bash
     kubectl exec -it nginx -- /bin/sh 
     ```
- id: '5'
  category: Kubernetes (CKAD) - Core Concepts
  question: |
   "### Get the YAML for a new namespace called 'myns' without creating it"
  answer: |
    ```bash
    kubectl create namespace myns -o yaml --dry-run=client
    ```
- id: '6'
  category: Kubernetes (CKAD) - Core Concepts
  question: "### Get pods on all namespaces"
  answer: | 
    ```bash
      kubectl get po --all-namespaces
    ```
      Alternatively, we can do
    
    ```bash
      kubectl get po -A
    ```
- id: '7'
  category: Kubernetes (CKAD) - Core Concepts
  question: "### Create a pod with image nginx called nginx and expose traffic on
    port 80"
  answer: |
    ```bash
    kubectl run nginx --image=nginx --restart=Never --port=80
    ```
- id: '8'
  category: Kubernetes (CKAD) - Core Concepts
  question: If a pod "nginx" crashed and restarted, get logs about the previous instance
  answer: |
    ```bash
    kubectl logs nginx -p
    ```
- id: '9'
  category: Kubernetes (CKAD) - Core Concepts
  question: Create a busybox pod that echoes 'hello world' and then exits
  answer: |
   ```bash
    kubectl run busybox --image=busybox -it --restart=Never -- echo 'hello world' 
    ```
    ```bash
    kubectl run busybox --image=busybox -it --restart=Never -- /bin/sh -c 'echo hello world'
    ```
- id: '10'
  category: Kubernetes (CKAD) - Core Concepts
  question: Create a busybox pod that echoes 'hello world' and then exits, However,
    delete the pod automatically when completed
  answer: |
    ```bash
      kubectl run busybox --image=busybox -it --rm --restart=Never -- /bin/sh -c 'echo hello world'
    ```
- id: '11'
  category: Kubernetes (CKAD) - Core Concepts
  question: Create an nginx pod and set an env value as 'var1=val1'. Check the env
    value existence within the pod
  answer: |
   ```bash
    kubectl run nginx --image=nginx --restart=Never --env=var1=val1
    ```
    then
    
    ```bash
    kubectl exec -it nginx -- env
    ```
    or
    ```bash
    kubectl exec -it nginx -- sh -c 'echo $var1'
    ```
    or

    ```bash
    kubectl describe po nginx | grep val1
    ```
- id: '12'
  category: Kubernetes (CKAD) - Multi-container Pods
  question: Create an nginx pod and set an env value as 'var1=val1'. Check the env
    value existence within the pod
  answer: |
    ```bash
     kubectl run nginx --image=nginx --restart=Never --env=var1=val1
    ```
    then
    
    ```bash
    kubectl exec -it nginx -- env\n# or\nkubectl exec -it nginx -- sh -c 'echo $var1'
    ```
    or

    ```bash
    kubectl describe po nginx | grep val1
    ```
- id: '13'
  category: Kubernetes (CKAD) - Multi-container Pods
  question: Create a Pod with two containers, both with image busybox and command "echo hello; sleep 3600". Connect to the second container and run 'ls'
  answer: |
    The easiest way to do it is create a pod with a single container and save its definition in a YAML file:

    ```bash
     kubectl run busybox --image=busybox --restart=Never -o yaml --dry-run=client -- /bin/sh -c 'echo hello;sleep 3600' > pod.yaml vi pod.yaml```
- id: '14'
  category: Kubernetes (CKAD) - Services and Networking
  question: Create a Pod with two containers, both with image busybox and command
    "echo hello; sleep 3600". Connect to the second container and run 'ls'
  answer: ''
